import java.lang.reflect.Array;
import java.util.ArrayList;

public class Apl {

	private static int aantalGetallen = 100;
	private static int[] heleGetallen;
	private static ArrayList<Integer> gesorteerdeLijst = new ArrayList<Integer>(aantalGetallen);
	
	public static void main(String[] args) {
			
			heleGetallen = new int[aantalGetallen];
			gesorteerdeLijst = new ArrayList<Integer>(aantalGetallen);
			
			vulArray();
			
			for(int j = 0; j < aantalGetallen; j++) {
				gesorteerdeLijst.add(0);
			}
			
			// start de tuntime stopwatch
			long startTime = System.currentTimeMillis();
		
			opdracht1(heleGetallen);

			// stop en print de runtime
			long endTime = System.currentTimeMillis();
			System.out.println("\nSorting took " + (endTime - startTime) + " ms");

		
//		System.out.println(gesorteerdeLijst.toString());
//		for (int i = 0; i < heleGetallen.length; i++) {
//			System.out.print(heleGetallen[i] + ", ");
//		}
	}

	/**
	 * Methode voor het vullen van de array met willekeurige hele getallen.
	 */
	public static void vulArray() {
		for (int i = 0; i < aantalGetallen; i++) {

			// random getal tussen 0 en 100
			int getal = randInt(0, 100);

			heleGetallen[i] = getal;
		}
	}

	/**
	 * Methode voor het genereren van een radom getal tussen twee grenzen.
	 * @param min - ondergrens
	 * @param max - bovengrens
	 * @return het gegenereerde random getal
	 */
	public static int randInt(int min, int max) {
		assert min < max : "Het maximum is kleiner dan het minimum";
		
		return min + (int) (Math.random() * max);
	}
	
	public static void opdracht1(int[] array) {
		Thread is = new InsertionSort(array, aantalGetallen, gesorteerdeLijst);
		is.start();
	}
	
	public static void opdracht2() {
		
	}
	
	public static void opdracht3() {
		
	}
	
	public static void opdracht4() {
		
	}
	
}
