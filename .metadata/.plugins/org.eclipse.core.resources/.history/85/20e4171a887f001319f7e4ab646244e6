import java.util.ArrayList;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;


public class HerdenkingsDienst {
	
	private final int MAX_AANTAL_BURGERS = 10;
	
	private	Lock lock;	
	private	Condition geenBurgers, wachtendeBurgers, wachtendeBekleders, geenBekleders;	
	
	private int aangemeldeBurgers = 0;
	private int aangemeldeBekleders = 0;
	
	private int burgersBinnen = 0;
	private int bekledersBinnen = 0;
	
	public HerdenkingsDienst() {
		
	 	lock = new ReentrantLock();
	 	geenBurgers = lock.newCondition();
	 	wachtendeBurgers = lock.newCondition();
	 	wachtendeBekleders = lock.newCondition();
	 	geenBekleders = lock.newCondition();
	 			
	}
	
	public void naarDienst(BezoekerType type) throws InterruptedException {
		lock.lock();
		try {
			
			switch (type) {
				case BURGER:
					aangemeldeBurgers++;
					System.out.println(((Burger) Thread.currentThread()).toString() + " heeft zich aangemeld.");
					while (!bekledersBinnen()) {
						wachtendeBurgers.await();
					}
					burgersBinnen++;
				
					break;
				case HOOGWAARDIGHEIDSBEKLEDER:
					aangemeldeBekleders++;
					System.out.println(((Hoogwaardigheidsbekleder) Thread.currentThread()).toString() + " heeft zich aangemeld.");
					
					bekledersBinnen++;
				
					break;
				
				case BEWAKER:
					System.out.println(((Bewaker) Thread.currentThread()).toString() + " heeft zich aangemeld.");
				
					break;

				default:
					break;
			}
			
		} finally {
			lock.unlock();
		}
		
	}
	
	public void verlaatDienst(BezoekerType type) throws InterruptedException {
		lock.lock();
		try {
			switch (type) {
			case BURGER:
				aangemeldeBurgers--;
				System.out.println(((Burger) Thread.currentThread()).toString() + " heeft de dienst verlaten.");
			
				break;
			case HOOGWAARDIGHEIDSBEKLEDER:
				aangemeldeBekleders--;
				System.out.println(((Hoogwaardigheidsbekleder) Thread.currentThread()).toString() + " heeft de dienst verlaten.");
			
				break;
			
			case BEWAKER:
				System.out.println(((Bewaker) Thread.currentThread()).toString() + " heeft zich aangemeld.");
			
				break;

			default:
				break;
		}
			
			
		} finally {
			lock.unlock();
		}
		
	}
	
	private boolean dienstVol() {
		return (MAX_AANTAL_BURGERS == burgersBinnen);
	}
	
	private boolean geenBekledersBinnen() {
		return (bekledersBinnen == 0);
	}
	
	
}
