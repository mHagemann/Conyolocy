import java.util.concurrent.Semaphore;


public class SoftwareProject {
	
	private static final int NR_OF_USERS = 5;
	private static final int NR_OF_DEVELOPERS = 7;
	private static final int NR_OF_LEADERS = 1;
	
	private Semaphore userMeeting, developersMeeting, leaderInvitation;
	
	private Thread[] users;
	private Thread[] developers;
	private ProjectLeader leader;
	
	public SoftwareProject() {
		users = new Thread[NR_OF_USERS];
		developers = new Thread[NR_OF_DEVELOPERS];
		
		for(int i = 0; i < NR_OF_USERS; i++) {
			users[i] = new User("user" + i);
		}
		
		for(int i = 0; i < NR_OF_DEVELOPERS; i++) {
			developers[i] = new SoftwareDeveloper("developer" + i);
		}
		
		leader = new ProjectLeader("Klaas");
	}
	
	class User extends Thread{
		
		private String name;
		
		public User(String name) {
			this.name = name;
		}

		public void run() {
			while (true) {			
				//TODO
			}
		}
		
	}
	
	class ProjectLeader extends Thread {
		
		private String name;
		
		public ProjectLeader(String name) {
			this.name = name;
		}
		
		public void run() {
			while (true) {
				
				
				meet();
				
				
			}
		}
		
		public void meet() {
			try {
				System.out.println("Projectleader is in a meeting");
				Thread.sleep((int)(Math.random() * 1000));
			} catch (InterruptedException e) {}
		}
	}
	
	/**
	 * Innerclass voor de softwareDevelopers
	 * @author Hagemann
	 *
	 */
	class SoftwareDeveloper extends Thread {

		private String name;
		
		public SoftwareDeveloper(String name) {
			this.name = name;
		}
		
		public void run() {
			while (true) {			
				//TODO
			}
		}
	}

}
